#############################################################
######################### Plots #############################
#############################################################
library(matrixStats)
M.cond.R.mean <- colMeans(M.cond.R)
M.cond.R.lower <- colMeans(M.cond.R.lower)
M.cond.R.upper <- colMeans(M.cond.R.upper)
sigma.M.vec <- c(5, 10, 20, 25, 35)
sigma.R.vec <- c(0.4, 0.8, 1, 2, 3)
# generate data
generate.data <- function(n) {
R <- runif(n, 0, 7.5)
R[R >= 4] <- R[R >= 4]+0.5
M <- rnorm(n, 1.6*R^1.8, 2.9)
return(list(M.obs = M, R.obs = R))
}
set.seed(20170401)
gen.data <- generate.data(100*100)
M.obs <- gen.data$M.obs
R.obs <- gen.data$R.obs
# create dataframe
data.sim <- data.frame(
radius = R.obs, mass = M.obs
)
# create dataframe
data.sim.one <- data.frame(
radius.one = R.obs[1:100], mass.one = M.obs[1:100]
)
sim.df <- data.frame(
radius = R.points, M.cond.R.mean = M.cond.R.mean,
M.cond.R.upper = M.cond.R.upper, M.cond.R.lower = M.cond.R.lower
)
truth <- data.frame(
radius.t = seq(0, 8, by = 0.5),
mass.t = 1.6*seq(0, 8, by = 0.5)^1.8
)
library(ggplot2)
library(extrafont)
darkblue <- rgb(0,49,87,maxColorValue = 256)
lightblue <- rgb(5,122,255,maxColorValue = 256)
yellow <- rgb(242,208,58,maxColorValue = 256)
figure_sim1 <- ggplot(data.sim, aes(x = radius, y = mass)) +
geom_point(col = "lightblue", alpha = 0.5, size = 0.2) +
geom_point(data = data.sim.one, aes(x = radius.one, y = mass.one),
col = "blue", alpha = 1, size = 0.5) +
coord_cartesian(ylim = c(-5,70), xlim = c(0, 8)) +
geom_path(data = sim.df, aes(radius, M.cond.R.mean),
col = "orangered3", size = 1) +
geom_path(data = sim.df, aes(radius, M.cond.R.upper),
col = "orangered3", size = 0.5, linetype = 2) +
geom_path(data = sim.df, aes(radius, M.cond.R.lower),
col = "orangered3", size = 0.5, linetype = 2) +
geom_path(data = truth, aes(radius.t, mass.t),
col = darkblue, size = 0.8, linetype = 5) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(hjust = 0.5),
text=element_text(family="Helvetica", size=12, face = "bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1))+
xlab(label = "Radius") + ylab(label = "Mass") +
ggtitle(bquote(list(sigma[M]==.(sigma.M.vec[1]), sigma[R]==.(sigma.R.vec[1]))))
figure_sim1
setwd("~/Desktop/result/sim-center-at-3//")
M.points <- read.table("M.points.Rdata")
R.points <- read.table("R.points.Rdata")
Mass.marg.sim <- read.table("Mass.marg.sim.Rdata")
Radius.marg.sim <- read.table("Radius.marg.sim.Rdata")
M.cond.R.sim <- read.table("M.cond.R.sim.Rdata")
R.cond.M.sim <- read.table("R.cond.M.sim.Rdata")
M.cond.R.var.sim <- read.table("M.cond.R.var.sim.Rdata")
M.cond.R.lower.sim <- read.table("M.cond.R.lower.sim.Rdata")
M.cond.R.upper.sim <- read.table("M.cond.R.upper.sim.Rdata")
R.cond.M.var.sim <- read.table("R.cond.M.var.sim.Rdata")
R.cond.M.lower.sim <- read.table("R.cond.M.lower.sim.Rdata")
R.cond.M.upper.sim <- read.table("R.cond.M.upper.sim.Rdata")
M.points <- as.numeric(gsub(",", "", as.character(M.points$V2)))
R.points <- as.numeric(gsub(",", "", as.character(R.points$V2)))
Mass.marg.sim <- as.character(Mass.marg.sim$V2)
Radius.marg.sim <- as.character(Radius.marg.sim$V2)
M.cond.R.sim <- as.character(M.cond.R.sim$V2)
R.cond.M.sim <- as.character(R.cond.M.sim$V2)
M.cond.R.var.sim <- as.character(M.cond.R.var.sim$V2)
M.cond.R.lower.sim <- as.character(M.cond.R.lower.sim$V2)
M.cond.R.upper.sim <- as.character(M.cond.R.upper.sim$V2)
R.cond.M.var.sim <- as.character(R.cond.M.var.sim$V2)
R.cond.M.lower.sim <- as.character(R.cond.M.lower.sim$V2)
R.cond.M.upper.sim <- as.character(R.cond.M.upper.sim$V2)
Mass.marg <- NULL
Radius.marg <- NULL
M.cond.R <- NULL
R.cond.M <- NULL
M.cond.R.var <- NULL
M.cond.R.lower <- NULL
M.cond.R.upper <- NULL
R.cond.M.var <- NULL
R.cond.M.lower <- NULL
R.cond.M.upper <- NULL
for (i in 1:100) {
Mass.marg <- cbind(Mass.marg, as.numeric(unlist(strsplit(Mass.marg.sim[i+1], split = ","))))
Radius.marg <- cbind(Radius.marg, as.numeric(unlist(strsplit(Radius.marg.sim[i+1], split = ","))))
M.cond.R <- cbind(M.cond.R, as.numeric(unlist(strsplit(M.cond.R.sim[i+1], split = ","))))
R.cond.M <- cbind(R.cond.M, as.numeric(unlist(strsplit(R.cond.M.sim[i+1], split = ","))))
M.cond.R.var <- cbind(M.cond.R.var, as.numeric(unlist(strsplit(M.cond.R.var.sim[i+1], split = ","))))
M.cond.R.lower <- cbind(M.cond.R.lower, as.numeric(unlist(strsplit(M.cond.R.lower.sim[i+1], split = ","))))
M.cond.R.upper <- cbind(M.cond.R.upper, as.numeric(unlist(strsplit(M.cond.R.upper.sim[i+1], split = ","))))
R.cond.M.var <- cbind(R.cond.M.var, as.numeric(unlist(strsplit(R.cond.M.var.sim[i+1], split = ","))))
R.cond.M.lower <- cbind(R.cond.M.lower, as.numeric(unlist(strsplit(R.cond.M.lower.sim[i+1], split = ","))))
R.cond.M.upper <- cbind(R.cond.M.upper, as.numeric(unlist(strsplit(R.cond.M.upper.sim[i+1], split = ","))))
}
M.points <- M.points[2:101]
R.points <- R.points[2:101]
Mass.marg <- Mass.marg[2:101, ]
Radius.marg <- Radius.marg[2:101, ]
M.cond.R <- M.cond.R[2:101, ]
R.cond.M <- R.cond.M[2:101, ]
M.cond.R.var <- M.cond.R.var[2:101,]
M.cond.R.lower <- M.cond.R.lower[2:101,]
M.cond.R.upper <- M.cond.R.upper[2:101,]
R.cond.M.var <- R.cond.M.var[2:101,]
R.cond.M.lower <- R.cond.M.lower[2:101,]
R.cond.M.upper <- R.cond.M.upper[2:101,]
#############################################################
######################### Plots #############################
#############################################################
library(matrixStats)
M.cond.R.mean <- colMeans(M.cond.R)
M.cond.R.lower <- colMeans(M.cond.R.lower)
M.cond.R.upper <- colMeans(M.cond.R.upper)
sigma.M.vec <- c(5, 10, 20, 25, 35)
sigma.R.vec <- c(0.4, 0.8, 1, 2, 3)
# generate data
generate.data <- function(n) {
R <- runif(n, 0, 7.5)
R[R >= 4] <- R[R >= 4]+0.5
M <- rnorm(n, 1.6*R^1.8, 1)
return(list(M.obs = M, R.obs = R))
}
set.seed(20170401)
gen.data <- generate.data(100*100)
M.obs <- gen.data$M.obs
R.obs <- gen.data$R.obs
# create dataframe
data.sim <- data.frame(
radius = R.obs, mass = M.obs
)
# create dataframe
data.sim.one <- data.frame(
radius.one = R.obs[1:100], mass.one = M.obs[1:100]
)
sim.df <- data.frame(
radius = R.points, M.cond.R.mean = M.cond.R.mean,
M.cond.R.upper = M.cond.R.upper, M.cond.R.lower = M.cond.R.lower
)
truth <- data.frame(
radius.t = seq(0, 8, by = 0.5),
mass.t = 1.6*seq(0, 8, by = 0.5)^1.8
)
library(ggplot2)
library(extrafont)
darkblue <- rgb(0,49,87,maxColorValue = 256)
lightblue <- rgb(5,122,255,maxColorValue = 256)
yellow <- rgb(242,208,58,maxColorValue = 256)
figure_sim1 <- ggplot(data.sim, aes(x = radius, y = mass)) +
geom_point(col = "lightblue", alpha = 0.5, size = 0.2) +
geom_point(data = data.sim.one, aes(x = radius.one, y = mass.one),
col = "blue", alpha = 1, size = 0.5) +
coord_cartesian(ylim = c(-5,70), xlim = c(0, 8)) +
geom_path(data = sim.df, aes(radius, M.cond.R.mean),
col = "orangered3", size = 1) +
geom_path(data = sim.df, aes(radius, M.cond.R.upper),
col = "orangered3", size = 0.5, linetype = 2) +
geom_path(data = sim.df, aes(radius, M.cond.R.lower),
col = "orangered3", size = 0.5, linetype = 2) +
geom_path(data = truth, aes(radius.t, mass.t),
col = darkblue, size = 0.8, linetype = 5) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(hjust = 0.5),
text=element_text(family="Helvetica", size=12, face = "bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1))+
xlab(label = "Radius") + ylab(label = "Mass") +
ggtitle(bquote(list(sigma[M]==.(sigma.M.vec[1]), sigma[R]==.(sigma.R.vec[1]))))
figure_sim1
savepdf <- function(pdf.name, Myplot) {
pdf(file = pdf.name, width = 6, height = 6)
print(Myplot)
dev.off()
}
pdf.name <- "sim-missing-value.pdf"
savepdf(pdf.name, figure_sim1)
setwd("../../")
setwd("~/Documents/Research/[2017Astro]NonparamM-R/code-/")
setwd("~/Documents/Research/[2017Astro]NonparamM-R/")
setwd("code/Kepler-result/")
load("M.cond.R.boot.Rdata")
rm(list = ls())
load("M.cond.R.boot.Rdata")
load("~/Documents/Research/[2017Astro]NonparamM-R/code/Kepler-result/M.cond.R.boot.Rdata")
source("M.cond.R.boot.Rdata")
install.packages("Readr
")
rm(list = ls())
raw.data <- read.csv(file = "MR_Kepler_170605_noanalytTTV_noupplim.csv", skip = 49)
setwd("../../../../../Desktop/Kepler")
raw.data <- read.csv(file = "MR_Kepler_170605_noanalytTTV_noupplim.csv", skip = 49)
data <- subset(raw.data, select = c("rowid", "pl_hostname", "pl_masse",
"pl_masseerr1", "pl_masseerr2",
"pl_rade", "pl_radeerr1", "pl_radeerr2"))
Mass.sigma <- (data$pl_masseerr1 + abs(data$pl_masseerr2))/2
Radius.sigma <- (data$pl_radeerr1 + abs(data$pl_radeerr2))/2
Mass.obs <- raw.data$pl_masse
Radius.obs <- raw.data$pl_rade
Radius.min <- -0.3
Radius.max <- log10(max(Radius.obs) + sd(Radius.obs)/sqrt(length(Radius.obs)))
Mass.min <- log10( max(min(Mass.obs) - sd(Mass.obs)/sqrt(length(Mass.obs)), 0.1))
Mass.max <- log10(max(Mass.obs) + sd(Mass.obs)/sqrt(length(Mass.obs)))
deg <- 10
num.boot <- 100
deg.choose <- 55
num.boot <- 100
deg.choose <- 55
n <- length(Mass.obs) # num of obs.
if (length(Mass.obs) != length(Radius.obs)) {
warnings("The length of Mass and Radius must be the same!!!")
}
M.obs <- Mass.obs
R.obs <- Radius.obs
M.sg <- Mass.sigma
R.sg <- Radius.sigma
bounds <- c(M.max, M.min, R.max, R.min)
source("MRpredict/MLE.R")
bounds <- c(Mass.max, Mass.min, Radius.max, Radius.min)
source("MRpredict/MLE.R")
weights <- Mass.marg.boot <- Radius.marg.boot <-
M.cond.R.boot.var <- M.cond.R.boot <- R.cond.M.boot <- list()
pb  <- txtProgressBar(1, num.boot, style=3)
cat("\nStarting Bootstrap: \n")
boot.parallel.fn <- function(rep) {
# setTxtProgressBar(pb, rep)
print(rep)
n.boot <- sample(1:n, replace = T)
data.boot <- data[n.boot, ]
data.sg.boot <- data.sg[n.boot, ]
MR.boot <- MLE.fit(data.boot, data.sg.boot, bounds, deg = deg.choose, log = log)
}
library(parallel)
cl <- makeCluster(20)
result <- parLapply(cl, 1:num.boot, boot.parallel.fn, bounds = bounds)
MLE.fit
log
n
data
boot.parallel.fn <- function(rep, n, data, data.sg, bounds, deg.choose) {
# setTxtProgressBar(pb, rep)
print(rep)
n.boot <- sample(1:n, replace = T)
data.boot <- data[n.boot, ]
data.sg.boot <- data.sg[n.boot, ]
MR.boot <- MLE.fit(data = data.boot, sigma = data.sg.boot, bounds=bounds,
deg = deg.choose, log = TRUE)
}
library(parallel)
cl <- makeCluster(20)
result <- parLapply(cl, 1:num.boot, boot.parallel.fn, n = n, data = cbind(M.obs, R.obs),
data.sg = cbind(M.sg, R.sg), bounds = bounds, deg.choose = deg.choose)
source("MRpredict/MLE.R")
boot.parallel.fn <- function(rep, n, data, data.sg, bounds, deg.choose) {
source("MRpredict/MLE.R")
# setTxtProgressBar(pb, rep)
print(rep)
n.boot <- sample(1:n, replace = T)
data.boot <- data[n.boot, ]
data.sg.boot <- data.sg[n.boot, ]
MR.boot <- MLE.fit(data = data.boot, sigma = data.sg.boot, bounds=bounds,
deg = deg.choose, log = TRUE)
}
library(parallel)
cl <- makeCluster(20)
result <- parLapply(cl, 1:num.boot, boot.parallel.fn, n = n, data = cbind(M.obs, R.obs),
data.sg = cbind(M.sg, R.sg), bounds = bounds, deg.choose = deg.choose)
setwd("~/Desktop/Kepler/")
M.points <- read.table("M.points.csv")
R.points <- read.table("R.points.csv")
M.points
M.points <- read.csv("M.points.csv")
M.points
M.points$x
M.points <- read.csv("M.points.csv")$x
R.points <- read.table("R.points.csv")$x
R.points <- read.csv("R.points.csv")$x
Mass.marg <- read.table("Mass.marg.Rdata")
Radius.marg <- read.table("Radius.marg.Rdata")
M.cond.R <- read.table("M.cond.R.Rdata")
R.cond.M <- read.table("R.cond.M.Rdata")
M.cond.R.var <- read.table("M.cond.R.var.Rdata")
M.cond.R.lower <- read.table("M.cond.R.lower.Rdata")
M.cond.R.upper <- read.table("M.cond.R.upper.Rdata")
R.cond.M.var <- read.table("R.cond.M.var.Rdata")
rm(list = ls())
# setwd("~/Documents/Research/[2017Astro]NonparamM-R/code-may-15/Kepler-result/")
setwd("~/Desktop/Kepler/")
M.points <- read.csv("M.points.csv")$x
R.points <- read.csv("R.points.csv")$x
Mass.marg <- read.table("Mass.marg.Rdata")
Radius.marg <- read.table("Radius.marg.Rdata")
M.cond.R <- read.table("M.cond.R.Rdata")
R.cond.M <- read.table("R.cond.M.Rdata")
M.cond.R.var <- read.table("M.cond.R.var.Rdata")
M.cond.R.lower <- read.table("M.cond.R.lower.Rdata")
M.cond.R.upper <- read.table("M.cond.R.upper.Rdata")
R.cond.M.var <- read.table("R.cond.M.var.Rdata")
R.cond.M.lower <- read.table("R.cond.M.lower.Rdata")
R.cond.M.upper <- read.table("R.cond.M.upper.Rdata")
Mass.marg.boot <- read.csv("Mass.marg.boot.csv")
Mass.marg.boot
rm(list = ls())
setwd("~/Documents/Research/[2017Astro]NonparamM-R/code/WRF16-result/")
### Read data for MLE.fit ####
M.points <- read.table("M.points.csv")$V1
R.points <- read.table("R.points.csv")$V1
Mass.marg <- read.table("Mass.marg.Rdata")
Radius.marg <- read.table("Radius.marg.Rdata")
M.cond.R <- read.table("M.cond.R.Rdata")
M.cond.R.var <- read.table("M.cond.R.var.Rdata")
M.cond.R.upper <- read.table("M.cond.R.upper.Rdata")
M.cond.R.lower <- read.table("M.cond.R.lower.Rdata")
R.cond.M <- read.table("R.cond.M.Rdata")
R.cond.M.var <- read.table("R.cond.M.var.Rdata")
R.cond.M.upper <- read.table("R.cond.M.upper.Rdata")
R.cond.M.lower <- read.table("R.cond.M.lower.Rdata")
Mass.marg <- as.numeric(gsub(",", "", as.character(Mass.marg$V2)))[2:101]
Radius.marg <- as.numeric(gsub(",", "", as.character(Radius.marg$V2)))[2:101]
M.cond.R <- as.numeric(gsub(",", "", as.character(M.cond.R$V2)))[2:101]
R.cond.M <- as.numeric(gsub(",", "", as.character(R.cond.M$V2)))[2:101]
M.cond.R.var <- as.numeric(gsub(",", "", as.character(M.cond.R.var$V2)))[2:101]
M.cond.R.lower <- as.numeric(gsub(",", "", as.character(M.cond.R.lower$V2)))[2:101]
M.cond.R.upper <- as.numeric(gsub(",", "", as.character(M.cond.R.upper$V2)))[2:101]
R.cond.M.var <- as.numeric(gsub(",", "", as.character(R.cond.M.var$V2)))[2:101]
R.cond.M.lower <- as.numeric(gsub(",", "", as.character(R.cond.M.lower$V2)))[2:101]
R.cond.M.upper <- as.numeric(gsub(",", "", as.character(R.cond.M.upper$V2)))[2:101]
M.cond.R.sd <- sqrt(M.cond.R.var)
R.cond.M.sd <- sqrt(R.cond.M.var)
raw.data <- read.csv("../data-WRF16.csv", header = T) # read dataset
Mass.obs <- raw.data$mass[1:60]
Radius.obs <- raw.data$radii[1:60]
Mass.sigma <- raw.data$s.d.mass[1:60]
Radius.sigma <- raw.data$s.d.radii[1:60]
# save-to-pdf function
savepdf <- function(pdf.name, Myplot) {
pdf(file = pdf.name, width = 6, height = 6)
print(Myplot)
dev.off()
}
####################### Figure 1 #############################
darkblue <- rgb(0,49,87,maxColorValue = 256) # color
library(ggplot2)
library(extrafont)
# create data.frame
nonparam.df <- data.frame(
radius.np = R.points,
M.cond.R.mean.np = M.cond.R,
M.cond.R.upper.np = M.cond.R+M.cond.R.sd,
M.cond.R.lower.np = M.cond.R-M.cond.R.sd
)
WRF16.less8.df <- data.frame(
radius.less8 = R.points,
M.cond.R.mean.less8 = 1.6*R.points^1.8
)
WRF16.less4.df <- data.frame(
radius.less4 = R.points[R.points <= 4],
M.cond.R.mean.less4 = 2.7*R.points[R.points <= 4]^1.3
)
data.points <- data.frame(M.obs = Mass.obs, R.obs = Radius.obs,
M.max = Mass.sigma+Mass.obs, R.max = Radius.obs+Radius.sigma,
M.min = Mass.obs-Mass.sigma, R.min = Radius.obs-Radius.sigma)
figure1 <- ggplot() +
geom_path(data = nonparam.df, aes(radius.np, M.cond.R.mean.np),
color = darkblue, size = 1.5) +
geom_ribbon(data = nonparam.df,
aes(x = radius.np,
ymin = M.cond.R.lower.np, ymax = M.cond.R.upper.np),
fill = darkblue, alpha = 0.3) +
geom_path(data = WRF16.less8.df, aes(radius.less8, M.cond.R.mean.less8),
col = "#006666", size = 1.5) +
geom_ribbon(data = WRF16.less8.df,
aes(x = radius.less8,
ymin = M.cond.R.mean.less8-2.9, ymax = M.cond.R.mean.less8+2.9),
fill = "#66FFFF", alpha = 0.6)  +
geom_ribbon(data = WRF16.less4.df,
aes(x = radius.less4,
ymin = M.cond.R.mean.less4-1.9, ymax = M.cond.R.mean.less4+1.9),
fill = "#66B2FF", alpha = 1) +
geom_path(data = WRF16.less4.df, aes(radius.less4, M.cond.R.mean.less4),
col = "#0066CC", size = 1) +
geom_point(data = data.points, aes(x = R.obs, y = M.obs),
col = "grey10", alpha = 0.6, size = 0.5) +
geom_errorbar(data = data.points,
aes(x = R.obs, ymin = M.min, ymax = M.max),
col = "grey20", alpha = 0.6, size = 0.2) +
geom_errorbarh(data = data.points,
aes(x = R.obs, y = M.obs, xmin = R.min, xmax = R.max),
col = "grey20", alpha = 0.6, size = 0.2) +
xlab(expression(paste("Radius (R"["Earth"],")"))) +
ylab(expression(paste("Mass (M"["Earth"],")"))) +
coord_cartesian(ylim = c(-5,80), xlim = c(0.3, 8)) +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=15,face="bold"),
plot.title = element_text(hjust = 0.5),
text=element_text(family="Helvetica", size=12, face = "bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
annotate("text", x=2.2, y=75, size = 6,
label= as.character(expression(paste("< 8R"["Earth"]," Nonparam"))),
parse=TRUE, col = darkblue) +
annotate("text", x=2, y=67, size = 6,
label= as.character(expression(paste("< 8R"["Earth"]," WRF16"))),
parse=TRUE, col = "#66FFFF") +
annotate("text", x=2, y=59, size = 6,
label= as.character(expression(paste("< 4R"["Earth"]," WRF16"))),
parse=TRUE, col = "#0066CC")
# ggtitle("Mass-Radius Relations")
pdf.name <- "figure1-MRrelations.pdf"
savepdf(pdf.name, figure1)
######################### Figure 2 ###############################
# read bootstrap data
Mass.marg.boot <- read.table("Mass.marg.boot.csv")
Radius.marg.boot <- read.table("Radius.marg.boot.csv")
M.cond.R.boot <- read.table("M.cond.R.boot.csv")
R.cond.M.boot <- read.table("R.cond.M.boot.csv")
M.cond.R.var.boot <- read.table("M.cond.R.var.boot.csv")
M.cond.R.quantile.boot <- read.table("M.cond.R.quantile.boot.csv")
R.cond.M.var.boot <- read.table("R.cond.M.var.boot.csv")
R.cond.M.quantile.boot <- read.table("R.cond.M.quantile.boot.csv")
Mass.marg.boot <- as.matrix(Mass.marg.boot)
Radius.marg.boot <- as.matrix(Radius.marg.boot)
M.cond.R.boot <- as.matrix(M.cond.R.boot)
R.cond.M.boot <- as.matrix(R.cond.M.boot)
M.cond.R.var.boot <- as.matrix(M.cond.R.var.boot)
R.cond.M.var.boot <- as.matrix(R.cond.M.var.boot)
M.cond.R.lower.boot <- as.matrix(M.cond.R.quantile.boot)[1, ]
M.cond.R.upper.boot <- as.matrix(M.cond.R.quantile.boot)[2, ]
R.cond.M.lower.boot <- as.matrix(R.cond.M.quantile.boot)[1, ]
R.cond.M.upper.boot <- as.matrix(R.cond.M.quantile.boot)[2, ]
M.cond.R.sd.boot <- sqrt(M.cond.R.var.boot)
R.cond.M.sd.boot <- sqrt(R.cond.M.var.boot)
M.cond.R.median.boot <- rowMedians(M.cond.R.boot)
M.cond.R.lower.boot <- rowQuantiles(M.cond.R.boot, probs = 0.14)
M.cond.R.upper.boot <- rowQuantiles(M.cond.R.boot, probs = 0.86)
library(matrixStats)
M.pureFe <- exp((-0.4938 +
sqrt(0.4938^2 - 4*0.0975*(0.7932-R.points[R.points>0.2])))/(2*0.0975))
upper.bound <- rowMins(cbind(M.cond.R.upper[R.points>0.2], M.pureFe))
upper.bound <- c(upper.bound[1], upper.bound)
lower.bound <- M.cond.R.lower
lower.bound[lower.bound < 0] <- 0
nonparam.pred <- data.frame(
radius = R.points,
M.cond.R.mean = M.cond.R,
M.cond.R.upper.np = M.cond.R.lower,
M.cond.R.lower.np = M.cond.R.upper
)
nonparam.boot <- data.frame(
radius = R.points,
M.cond.R.upper.boot = M.cond.R.upper.boot,
M.cond.R.lower.boot = M.cond.R.lower.boot
)
data.points <- data.frame(M.obs = Mass.obs, R.obs = Radius.obs,
M.max = Mass.sigma+Mass.obs, R.max = Radius.obs+Radius.sigma,
M.min = Mass.obs-Mass.sigma, R.min = Radius.obs-Radius.sigma)
upper.bound <- data.frame(R = R.points[R.points < 3.2],
upper.bound = upper.bound[R.points < 3.2])
lower.bound <- data.frame(R = R.points[R.points < 1.8],
lower.bound = lower.bound[R.points < 1.8])
figure2 <- ggplot() +
geom_path(data = nonparam.pred, aes(radius, M.cond.R.mean),
color = darkblue, size = 1) +
geom_ribbon(data = nonparam.pred,
aes(x = radius,
ymin = M.cond.R.lower, ymax = M.cond.R.upper),
fill = darkblue, alpha = 0.3) +
# geom_ribbon(data = nonparam.boot,
#             aes(x = radius,
#                 ymin = M.cond.R.lower.boot, ymax = M.cond.R.upper.boot),
#             fill = "#66FFFF", alpha = 0.6) +
geom_point(data = data.points, aes(x = R.obs, y = M.obs),
col = "grey10", alpha = 0.6, size = 0.5) +
geom_errorbar(data = data.points,
aes(x = R.obs, ymin = M.min, ymax = M.max),
col = "grey20", alpha = 0.6, size = 0.2) +
geom_errorbarh(data = data.points,
aes(x = R.obs, y = M.obs, xmin = R.min, xmax = R.max),
col = "grey20", alpha = 0.6, size = 0.2) +
geom_path(data = upper.bound, aes(x = R, y = upper.bound), color = "red",
size = 1, linetype = 2) +
geom_path(data = lower.bound, aes(x = R, y = lower.bound), color = "red",
size = 1, linetype = 2) +
xlab(expression(paste("Radius (R"["Earth"],")"))) +
ylab(expression(paste("Mass (M"["Earth"],")"))) +
coord_cartesian(ylim = c(-5,80), xlim = c(0.3, 8)) +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=15,face="bold"),
plot.title = element_text(hjust = 0.5),
text=element_text(family="Helvetica", size=12, face = "bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
# ggtitle("Nonparametric M-R relation \n with its predicted intervals")
pdf.name <- "figure2-MRpredictedintervals.pdf"
savepdf(pdf.name, figure2)

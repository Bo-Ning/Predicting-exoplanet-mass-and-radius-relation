}
sapply(x, mix.density)
}
}
mixture.conditional.quantile <- function(q, x.min = Radius.min, x.max = Radius.max){
g <- function(x){ mixture.cdf.conditional.densities(x)-q }
return( uniroot(g, interval=c(x.min, x.max) )$root )
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Radius.min, x.max = Radius.max)
# calculate the 16% and 84% quantiles using uniroot function
# mixture of the CDF of k conditional densities
mixture.cdf.conditional.densities <- function(x) {
pbeta.conditional.density <- function(x){
mix.density <- function(j) {
x.indv.cdf <-
sapply(deg.vec,
function(x, degree) {pbeta(x, degree, deg-degree+1)},
x = (j-x.min)/(x.max-x.min))
quantile.numerator <- rep(0,k)
p.beta.sample <- rep(0, k)
for (ii in 1:k) {
quantile.numerator[ii] <- sum(w.hat * kronecker(x.indv.cdf, y.beta.indv.sample[ii, ]))
p.beta.sample[ii] <- quantile.numerator[ii]/denominator.sample[ii]
}
p.beta <- mean(p.beta.sample)
}
sapply(x, mix.density)
}
}
mixture.conditional.quantile <- function(q, x.min, x.max){
g <- function(x){ mixture.cdf.conditional.densities(x)-q }
return( uniroot(g, interval=c(x.min, x.max) )$root )
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Mass.min, x.max = Mass.max)
qtl
q <- 0.16
x.min = Radius.min
x.max = Radius.max
g <- function(x){ mixture.cdf.conditional.densities(x)-q }
root <-  uniroot(g, interval=c(x.min, x.max) )$root
help(uniroot)
x.min <- Mass.min
x.max <- Mass.max
g <- function(x){ mixture.cdf.conditional.densities(x)-q }
root <- uniroot(g, interval=c(x.min, x.max) )$root
q
Mass.min
Mass.max
# calculate the 16% and 84% quantiles using uniroot function
# mixture of the CDF of k conditional densities
pbeta.conditional.density <- function(x){
mix.density <- function(j) {
x.indv.cdf <-
sapply(deg.vec,
function(x, degree) {pbeta(x, degree, deg-degree+1)},
x = (j-x.min)/(x.max-x.min))
quantile.numerator <- rep(0,k)
p.beta.sample <- rep(0, k)
for (ii in 1:k) {
quantile.numerator[ii] <-
sum(w.hat * kronecker(x.indv.cdf, y.beta.indv.sample[ii, ]))
p.beta.sample[ii] <- quantile.numerator[ii]/denominator.sample[ii]
}
p.beta <- mean(p.beta.sample)
}
sapply(x, mix.density)
}
mixture.conditional.quantile <- function(q, x.min, x.max){
g <- function(x){ pbeta.conditional.density(x)-q }
root <- uniroot(g, interval=c(x.min, x.max) )$root
return(root)
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Mass.min, x.max = Mass.max)
deg.vec <- 1:55
# calculate the 16% and 84% quantiles using uniroot function
# mixture of the CDF of k conditional densities
pbeta.conditional.density <- function(x){
mix.density <- function(j) {
deg.vec <- 1:55
x.indv.cdf <-
sapply(deg.vec,
function(x, degree) {pbeta(x, degree, deg-degree+1)},
x = (j-x.min)/(x.max-x.min))
quantile.numerator <- rep(0,k)
p.beta.sample <- rep(0, k)
for (ii in 1:k) {
quantile.numerator[ii] <-
sum(w.hat * kronecker(x.indv.cdf, y.beta.indv.sample[ii, ]))
p.beta.sample[ii] <- quantile.numerator[ii]/denominator.sample[ii]
}
p.beta <- mean(p.beta.sample)
}
sapply(x, mix.density)
}
mixture.conditional.quantile <- function(q, x.min, x.max){
g <- function(x){ pbeta.conditional.density(x)-q }
root <- uniroot(g, interval=c(x.min, x.max) )$root
return(root)
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Mass.min, x.max = Mass.max)
# calculate the 16% and 84% quantiles using uniroot function
# mixture of the CDF of k conditional densities
pbeta.conditional.density <- function(x){
mix.density <- function(j) {
deg.vec <- 1:55
x.indv.cdf <-
sapply(deg.vec,
function(x, degree) {pbeta(x, degree, deg-degree+1)},
x = (j-x.min)/(x.max-x.min))
quantile.numerator <- rep(0,k)
p.beta.sample <- rep(0, k)
for (ii in 1:k) {
quantile.numerator[ii] <-
sum(weights.mle * kronecker(x.indv.cdf, y.beta.indv.sample[ii, ]))
p.beta.sample[ii] <- quantile.numerator[ii]/denominator.sample[ii]
}
p.beta <- mean(p.beta.sample)
}
sapply(x, mix.density)
}
mixture.conditional.quantile <- function(q, x.min, x.max){
g <- function(x){ pbeta.conditional.density(x)-q }
root <- uniroot(g, interval=c(x.min, x.max) )$root
return(root)
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Mass.min, x.max = Mass.max)
predicted.lower.quantile <- predicted.quantiles[2]
predicted.quantiles
Radius <- rnorm(100, 5, 1)
radius.sample <- log10(Radius)
deg <- 55
k <- length(radius.sample) # length of samples
mean.sample <- denominator.sample <- rep(0, k)
y.beta.indv.sample <- matrix(0, k, deg)
# calculate the mean
for (i in 1:k) {
results <-
cond.density.estimation(
y = radius.sample[i], y.max = Radius.max,
y.min = Radius.min, x.max = Mass.max,
x.min = Mass.min, deg = 55,
w.hat = weights.mle, qtl = quantile,
only.output.mean = TRUE
)
mean.sample[i] <- (results[1])
denominator.sample[i] <- results[2]
y.beta.indv.sample[i, ] <- results[3:57]
}
predicted.mean <- mean(mean.sample)
# calculate the 16% and 84% quantiles using uniroot function
# mixture of the CDF of k conditional densities
pbeta.conditional.density <- function(x){
mix.density <- function(j) {
deg.vec <- 1:55
x.indv.cdf <-
sapply(deg.vec,
function(x, degree) {pbeta(x, degree, deg-degree+1)},
x = (j-x.min)/(x.max-x.min))
quantile.numerator <- rep(0,k)
p.beta.sample <- rep(0, k)
for (ii in 1:k) {
quantile.numerator[ii] <-
sum(weights.mle * kronecker(x.indv.cdf, y.beta.indv.sample[ii, ]))
p.beta.sample[ii] <- quantile.numerator[ii]/denominator.sample[ii]
}
p.beta <- mean(p.beta.sample)
}
sapply(x, mix.density)
}
mixture.conditional.quantile <- function(q, x.min, x.max){
g <- function(x){ pbeta.conditional.density(x)-q }
root <- uniroot(g, interval=c(x.min, x.max) )$root
return(root)
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Mass.min, x.max = Mass.max)
predicted.lower.quantile <- predicted.quantiles[1]
predicted.upper.quantile <- predicted.quantiles[2]
predicted.mean
predicted.lower.quantile
predicted.upper.quantile
Radius <- rnorm(100, 5, 0.1)
radius.sample <- log10(Radius)
deg <- 55
k <- length(radius.sample) # length of samples
mean.sample <- denominator.sample <- rep(0, k)
y.beta.indv.sample <- matrix(0, k, deg)
# the model can be view as a mixture of k conditional densities for f(log m |log r), each has weight 1/k
# the mean of this mixture density is 1/k times sum of the mean of each conditional density
# the quantile is little bit hard to compute, and maynot avaible due to computational issues
# calculate the mean
for (i in 1:k) {
results <-
cond.density.estimation(
y = radius.sample[i], y.max = Radius.max,
y.min = Radius.min, x.max = Mass.max,
x.min = Mass.min, deg = 55,
w.hat = weights.mle, qtl = quantile,
only.output.mean = TRUE
)
mean.sample[i] <- (results[1])
denominator.sample[i] <- results[2]
y.beta.indv.sample[i, ] <- results[3:57]
}
predicted.mean <- mean(mean.sample)
# calculate the 16% and 84% quantiles using uniroot function
# mixture of the CDF of k conditional densities
pbeta.conditional.density <- function(x){
mix.density <- function(j) {
deg.vec <- 1:55
x.indv.cdf <-
sapply(deg.vec,
function(x, degree) {pbeta(x, degree, deg-degree+1)},
x = (j-x.min)/(x.max-x.min))
quantile.numerator <- rep(0,k)
p.beta.sample <- rep(0, k)
for (ii in 1:k) {
quantile.numerator[ii] <-
sum(weights.mle * kronecker(x.indv.cdf, y.beta.indv.sample[ii, ]))
p.beta.sample[ii] <- quantile.numerator[ii]/denominator.sample[ii]
}
p.beta <- mean(p.beta.sample)
}
sapply(x, mix.density)
}
mixture.conditional.quantile <- function(q, x.min, x.max){
g <- function(x){ pbeta.conditional.density(x)-q }
root <- uniroot(g, interval=c(x.min, x.max) )$root
return(root)
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Mass.min, x.max = Mass.max)
predicted.lower.quantile <- predicted.quantiles[1]
predicted.upper.quantile <- predicted.quantiles[2]
predicted.mean
predicted.upper.quantile
predicted.lower.quantile
Radius <- rnorm(100, 5, 5)
radius.sample <- log10(Radius)
deg <- 55
k <- length(radius.sample) # length of samples
mean.sample <- denominator.sample <- rep(0, k)
y.beta.indv.sample <- matrix(0, k, deg)
# the model can be view as a mixture of k conditional densities for f(log m |log r), each has weight 1/k
# the mean of this mixture density is 1/k times sum of the mean of each conditional density
# the quantile is little bit hard to compute, and maynot avaible due to computational issues
# calculate the mean
for (i in 1:k) {
results <-
cond.density.estimation(
y = radius.sample[i], y.max = Radius.max,
y.min = Radius.min, x.max = Mass.max,
x.min = Mass.min, deg = 55,
w.hat = weights.mle, qtl = quantile,
only.output.mean = TRUE
)
mean.sample[i] <- (results[1])
denominator.sample[i] <- results[2]
y.beta.indv.sample[i, ] <- results[3:57]
}
predicted.mean <- mean(mean.sample)
# calculate the 16% and 84% quantiles using uniroot function
# mixture of the CDF of k conditional densities
pbeta.conditional.density <- function(x){
mix.density <- function(j) {
deg.vec <- 1:55
x.indv.cdf <-
sapply(deg.vec,
function(x, degree) {pbeta(x, degree, deg-degree+1)},
x = (j-x.min)/(x.max-x.min))
quantile.numerator <- rep(0,k)
p.beta.sample <- rep(0, k)
for (ii in 1:k) {
quantile.numerator[ii] <-
sum(weights.mle * kronecker(x.indv.cdf, y.beta.indv.sample[ii, ]))
p.beta.sample[ii] <- quantile.numerator[ii]/denominator.sample[ii]
}
p.beta <- mean(p.beta.sample)
}
sapply(x, mix.density)
}
mixture.conditional.quantile <- function(q, x.min, x.max){
g <- function(x){ pbeta.conditional.density(x)-q }
root <- uniroot(g, interval=c(x.min, x.max) )$root
return(root)
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Mass.min, x.max = Mass.max)
predicted.lower.quantile <- predicted.quantiles[1]
predicted.upper.quantile <- predicted.quantiles[2]
Radius <- rnorm(100, 5, 2)
radius.sample <- log10(Radius)
deg <- 55
k <- length(radius.sample) # length of samples
mean.sample <- denominator.sample <- rep(0, k)
y.beta.indv.sample <- matrix(0, k, deg)
# the model can be view as a mixture of k conditional densities for f(log m |log r), each has weight 1/k
# the mean of this mixture density is 1/k times sum of the mean of each conditional density
# the quantile is little bit hard to compute, and maynot avaible due to computational issues
# calculate the mean
for (i in 1:k) {
results <-
cond.density.estimation(
y = radius.sample[i], y.max = Radius.max,
y.min = Radius.min, x.max = Mass.max,
x.min = Mass.min, deg = 55,
w.hat = weights.mle, qtl = quantile,
only.output.mean = TRUE
)
mean.sample[i] <- (results[1])
denominator.sample[i] <- results[2]
y.beta.indv.sample[i, ] <- results[3:57]
}
predicted.mean <- mean(mean.sample)
# calculate the 16% and 84% quantiles using uniroot function
# mixture of the CDF of k conditional densities
pbeta.conditional.density <- function(x){
mix.density <- function(j) {
deg.vec <- 1:55
x.indv.cdf <-
sapply(deg.vec,
function(x, degree) {pbeta(x, degree, deg-degree+1)},
x = (j-x.min)/(x.max-x.min))
quantile.numerator <- rep(0,k)
p.beta.sample <- rep(0, k)
for (ii in 1:k) {
quantile.numerator[ii] <-
sum(weights.mle * kronecker(x.indv.cdf, y.beta.indv.sample[ii, ]))
p.beta.sample[ii] <- quantile.numerator[ii]/denominator.sample[ii]
}
p.beta <- mean(p.beta.sample)
}
sapply(x, mix.density)
}
mixture.conditional.quantile <- function(q, x.min, x.max){
g <- function(x){ pbeta.conditional.density(x)-q }
root <- uniroot(g, interval=c(x.min, x.max) )$root
return(root)
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Mass.min, x.max = Mass.max)
predicted.lower.quantile <- predicted.quantiles[1]
predicted.upper.quantile <- predicted.quantiles[2]
Radius <- rnorm(100, 5, 1.5)
radius.sample <- log10(Radius)
deg <- 55
k <- length(radius.sample) # length of samples
mean.sample <- denominator.sample <- rep(0, k)
y.beta.indv.sample <- matrix(0, k, deg)
# the model can be view as a mixture of k conditional densities for f(log m |log r), each has weight 1/k
# the mean of this mixture density is 1/k times sum of the mean of each conditional density
# the quantile is little bit hard to compute, and maynot avaible due to computational issues
# calculate the mean
for (i in 1:k) {
results <-
cond.density.estimation(
y = radius.sample[i], y.max = Radius.max,
y.min = Radius.min, x.max = Mass.max,
x.min = Mass.min, deg = 55,
w.hat = weights.mle, qtl = quantile,
only.output.mean = TRUE
)
mean.sample[i] <- (results[1])
denominator.sample[i] <- results[2]
y.beta.indv.sample[i, ] <- results[3:57]
}
predicted.mean <- mean(mean.sample)
# calculate the 16% and 84% quantiles using uniroot function
# mixture of the CDF of k conditional densities
pbeta.conditional.density <- function(x){
mix.density <- function(j) {
deg.vec <- 1:55
x.indv.cdf <-
sapply(deg.vec,
function(x, degree) {pbeta(x, degree, deg-degree+1)},
x = (j-x.min)/(x.max-x.min))
quantile.numerator <- rep(0,k)
p.beta.sample <- rep(0, k)
for (ii in 1:k) {
quantile.numerator[ii] <-
sum(weights.mle * kronecker(x.indv.cdf, y.beta.indv.sample[ii, ]))
p.beta.sample[ii] <- quantile.numerator[ii]/denominator.sample[ii]
}
p.beta <- mean(p.beta.sample)
}
sapply(x, mix.density)
}
mixture.conditional.quantile <- function(q, x.min, x.max){
g <- function(x){ pbeta.conditional.density(x)-q }
root <- uniroot(g, interval=c(x.min, x.max) )$root
return(root)
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Mass.min, x.max = Mass.max)
predicted.lower.quantile <- predicted.quantiles[1]
predicted.upper.quantile <- predicted.quantiles[2]
predicted.mean
predicted.upper.quantile
predicted.lower.quantile
predict.mass.given.radius <-
function(Radius, R.sigma = NULL, posterior.sample = FALSE, qtl = c(0.16, 0.84)) {
# upper bounds and lower bounds used in the Bernstein polynomial model in log10 scale
Radius.min <- -0.3
Radius.max <- 1.357509
Mass.min <- -1
Mass.max <- 3.809597
# read weights
weights.mle <- read.csv("weights.mle.csv")$x
# convert data into log scale
l.radius <- log10(Radius)
# The following function can deal with two cases:
# Case I: if input data do not have measurement errors
# Case II: if the input data have measurement errors
if (posterior.sample == FALSE) {
# convert Radius in log scale
predicted.value <-
conditonal.density(y = l.radius, y.sd = R.sigma, y.max = Radius.max,
y.min = Radius.min, x.max = Mass.max,
x.min = Mass.min, deg = 55,
w.hat = weights.mle, qtl = qtl)
predicted.mean <- predicted.value$mean
predicted.lower.quantile <- predicted.value$quantile[1]
predicted.upper.quantile <- predicted.value$quantile[2]
} else if (posterior.sample == TRUE) {
# Case III: if the input are posterior samples
radius.sample <- log10(Radius)
deg <- 55
k <- length(radius.sample) # length of samples
mean.sample <- denominator.sample <- rep(0, k)
y.beta.indv.sample <- matrix(0, k, deg)
# the model can be view as a mixture of k conditional densities for f(log m |log r), each has weight 1/k
# the mean of this mixture density is 1/k times sum of the mean of each conditional density
# the quantile is little bit hard to compute, and maynot avaible due to computational issues
# calculate the mean
for (i in 1:k) {
results <-
cond.density.estimation(
y = radius.sample[i], y.max = Radius.max,
y.min = Radius.min, x.max = Mass.max,
x.min = Mass.min, deg = 55,
w.hat = weights.mle, qtl = quantile,
only.output.mean = TRUE
)
mean.sample[i] <- (results[1])
denominator.sample[i] <- results[2]
y.beta.indv.sample[i, ] <- results[3:57]
}
predicted.mean <- mean(mean.sample)
# calculate the 16% and 84% quantiles using uniroot function
# mixture of the CDF of k conditional densities
pbeta.conditional.density <- function(x){
mix.density <- function(j) {
deg.vec <- 1:55
x.indv.cdf <-
sapply(deg.vec,
function(x, degree) {pbeta(x, degree, deg-degree+1)},
x = (j-x.min)/(x.max-x.min))
quantile.numerator <- rep(0,k)
p.beta.sample <- rep(0, k)
for (ii in 1:k) {
quantile.numerator[ii] <-
sum(weights.mle * kronecker(x.indv.cdf, y.beta.indv.sample[ii, ]))
p.beta.sample[ii] <- quantile.numerator[ii]/denominator.sample[ii]
}
p.beta <- mean(p.beta.sample)
}
sapply(x, mix.density)
}
mixture.conditional.quantile <- function(q, x.min, x.max){
g <- function(x){ pbeta.conditional.density(x)-q }
root <- uniroot(g, interval=c(x.min, x.max) )$root
return(root)
}
predicted.quantiles <- sapply(qtl, mixture.conditional.quantile,
x.min = Mass.min, x.max = Mass.max)
predicted.lower.quantile <- predicted.quantiles[1]
predicted.upper.quantile <- predicted.quantiles[2]
}
# return
return(list(predicted.mean = predicted.mean,
predicted.lower.quantile = predicted.lower.quantile,
predicted.upper.quantile = predicted.upper.quantile))
}
##################### Examples ######################
# observation without measurement errors
Radius <- 5
predict.result <- predict.mass.given.radius(Radius)
predict.result
# observation with a measurement error
Radius <- 5
R.sigma <- 0.1
predict.result <- predict.mass.given.radius(Radius, R.sigma = 0.1)
print(predict.result) # print out result
# input are posterior samples
Radius.samples <- rnorm(100, 5, 0.5)   # in the original scale, not log scale!!
predict.result <-
predict.mass.given.radius(Radius = Radius.samples, R.sigma = 0.1, posterior.sample = TRUE)
print(predict.result) # print out result
# if want to change the 16% and 84% quantiles to 5% and 95% quantiles.
Radius <- 5 # in the original scale, not log scale!!
predict.result <- predict.mass.given.radius(Radius, qtl = c(0.05, 0.95))
print(predict.result) # print out result
##################### Examples ######################
# observation without measurement error
Radius <- 5 # in the original scale, not log scale!!
predict.result <- predict.mass.given.radius(Radius)
print(predict.result) # print out result
